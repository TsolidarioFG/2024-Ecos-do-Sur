@startuml ComponentWorker
!include <C4/C4_Component>
Container(Leader, "Leader", "GenServer", "Requests updates from telegram and delegates them to the Workers or the InformationCollectors.")
System_Boundary(boundary, "Workers Module") {
    System_Boundary(workers, "Workers Pool") {
    Component(worker1, "Worker 1", "GenServer", "Handles a single user's conversation.\n\n Is in charge of discussing the issue with the user and finding a solution.")
    Component(worker2, "Worker 2", "GenServer", "Handles a single user's conversation.\n\n Is in charge of discussing the issue with the user and finding a solution.")
    Component(workerN, "Worker N", "GenServer", "Handles a single user's conversation.\n\n Is in charge of discussing the issue with the user and finding a solution.")
    }
    Component(cache, "Cache", "GenServer, ETS", "Stores the state of conversations with a TTL")
}
Container(informationCollectors, "InformationCollectors Module", "Poolboy", "Contains multiple InformationCollectors. Each of them handles a single user's conversation.\n\n They are in charge of collecting information to be stored.")

Rel(Leader, worker1, "Sends a message.")
Rel(Leader, worker2, "Sends a message.")
Rel(Leader, workerN, "Sends a message.")

Rel(worker1, cache, "Asks for a state to be stored")
Rel(worker2, cache, "Asks for a state to be stored")
Rel(workerN, cache, "Asks for a state to be stored")

Rel(workers, informationCollectors, "Delegates a User")

@enduml